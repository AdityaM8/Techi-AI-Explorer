generator client { provider = "prisma-client-js" }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(user)

  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  sessionsApp   ChatSession[] @relation("UserChat", references: [id])

  createdAt     DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Task {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  title         String
  description   String
  tags          String   @default("[]") // JSON stringified
  createdAt     DateTime @default(now())
  recommendations Recommendation[]
  sessions      ChatSession[]
}

model Tool {
  id            String   @id @default(cuid())
  name          String   @unique
  isFree        Boolean  @default(true)
  siteUrl       String
  category      String
  supportsEmbed Boolean  @default(true)
  embedType     String
  authType      String
  capabilities  String   // JSON stringified string[]
  calledPromptTemplate String?
  notes         String?
  createdAt     DateTime @default(now())
  // pgvector column added via SQL migration: embedding vector(1536)
}

model Recommendation {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  toolId    String
  tool      Tool     @relation(fields: [toolId], references: [id])
  rank      Int
  score     Float
  rationale String
  createdAt DateTime @default(now())
}

model ChatSession {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id])
  toolId     String
  tool       Tool     @relation(fields: [toolId], references: [id])
  userId     String?
  user       User?    @relation("UserChat", fields: [userId], references: [id])
  title      String
  startedAt  DateTime @default(now())
  status     String   @default("active")
  transcript String   @default("[]")
}
